const video = document.getElementById('video');

Promise.all([
    faceapi.nets.tinyFaceDetector.loadFromUri('../models'),
    faceapi.nets.faceLandmark68Net.loadFromUri('../models'),
    faceapi.nets.faceRecognitionNet.loadFromUri('../models'),
    faceapi.nets.faceExpressionNet.loadFromUri('../models')
]).then(startVideo);

function startVideo() {
    navigator.mediaDevices
        .getUserMedia({ video: { facingMode: 'user' } })
        .then((stream) => (video.srcObject = stream))
        .catch((err) => console.error(err));
}

function endVideo() {
    video.srcObject.getTracks().forEach((track) => track.stop());
    video.style.display = 'none';
    // document.location.href = '../index.html';
}

video.addEventListener('playing', () => {
    const canvas = faceapi.createCanvasFromMedia(video);
    document.body.append(canvas);
    const displaySize = { width: video.width, height: video.height };
    faceapi.matchDimensions(canvas, displaySize);
    setInterval(async () => {
        const detections = await faceapi
            .detectAllFaces(video, new faceapi.TinyFaceDetectorOptions())
            .withFaceLandmarks()
            .withFaceExpressions();
        const resizedDetections = faceapi.resizeResults(detections, displaySize);
        canvas.getContext('2d').clearRect(0, 0, canvas.width, canvas.height);
        faceapi.draw.drawDetections(canvas, resizedDetections);
        faceapi.draw.drawFaceLandmarks(canvas, resizedDetections);
        faceapi.draw.drawFaceExpressions(canvas, resizedDetections);
        // const expressions = resizedDetections[0]?.expressions;
        // if (expressions) {
        //     const { happy } = expressions;
        //     console.log({ happy });
        //     if (happy > 0.7) {
        //         endVideo();
        //     }
        // }
    }, 100);
});
